# Archivo de configuración para desarrollo con Docker Compose
version: "3.8"

services:
  # Base de datos PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: nestjs_postgres_dev
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: nestjs_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # Backend NestJS en modo desarrollo
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: nestjs_backend_dev
    restart: always
    depends_on:
      - database
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_USERNAME: admin
      DB_PASSWORD: admin
      DB_NAME: nestjs_db
      PORT: 3001
      NODE_ENV: development
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
      - "9229:9229" # Puerto para debugging
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network
    command: npm run start:dev

  # Frontend React en modo desarrollo
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: nestjs_frontend_dev
    restart: always
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    stdin_open: true
    tty: true
    command: npm start

  # Adminer para gestión de base de datos
  adminer:
    image: adminer:latest
    container_name: nestjs_adminer_dev
    restart: always
    depends_on:
      - database
    ports:
      - "8080:8080"
    networks:
      - app-network

volumes:
  postgres_data_dev:

networks:
  app-network:
    driver: bridge
