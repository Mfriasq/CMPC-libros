version: "3.8"

services:
  # Base de datos PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: nestjs_postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: biblioteca
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./docker/populate_libros.sql:/docker-entrypoint-initdb.d/02-populate_libros.sql
    networks:
      - app-network

  # Backend NestJS
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nestjs_backend
    restart: always
    depends_on:
      - database
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: biblioteca
      PORT: 3001
      NODE_ENV: production
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nestjs_frontend
    restart: always
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://localhost:3001
    ports:
      - "3000:80"
    networks:
      - app-network

  # Adminer para gesti√≥n de base de datos (opcional)
  adminer:
    image: adminer:latest
    container_name: nestjs_adminer
    restart: always
    depends_on:
      - database
    ports:
      - "8080:8080"
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
