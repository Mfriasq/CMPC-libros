// üìö Sistema de Gesti√≥n de Biblioteca - CMPC Libros
// Diagrama de Base de Datos Actualizado
// Generado el: 6 de octubre de 2025
// Incluye todas las caracter√≠sticas implementadas

Table estados {
  id integer [primary key, increment, note: 'ID √∫nico del estado']
  nombre varchar(50) [not null, unique, note: 'Nombre del estado (activo, eliminado)']
  
  Note: 'Tabla de estados para soft delete - controla el ciclo de vida de las entidades'
}

Table users {
  id integer [primary key, increment, note: 'ID √∫nico del usuario']
  email varchar [not null, unique, note: 'Email √∫nico del usuario']
  name varchar [not null, note: 'Nombre completo del usuario']
  age integer [null, note: 'Edad del usuario (opcional)']
  password varchar [not null, note: 'Contrase√±a hasheada con bcrypt']
  role user_role [not null, default: 'user', note: 'Rol: user, admin, librarian']
  estadoId integer [not null, ref: > estados.id, note: 'Referencia al estado']
  restoredAt timestamp [null, note: 'Fecha de restauraci√≥n despu√©s de eliminaci√≥n']
  deletedAt timestamp [null, note: 'Fecha de eliminaci√≥n l√≥gica (soft delete)']
  createdAt timestamp [not null, default: `now()`, note: 'Fecha de creaci√≥n']
  updatedAt timestamp [not null, default: `now()`, note: 'Fecha de √∫ltima actualizaci√≥n']
  
  Note: 'Usuarios del sistema con roles diferenciados y soft delete'
  indexes {
    email [unique]
    estadoId
    role
  }
}

Table generos {
  id integer [primary key, increment, note: 'ID √∫nico del g√©nero']
  nombre varchar [not null, unique, note: 'Nombre del g√©nero literario']
  descripcion text [null, note: 'Descripci√≥n detallada del g√©nero']
  estadoId integer [not null, ref: > estados.id, note: 'Referencia al estado']
  deletedAt timestamp [null, note: 'Fecha de eliminaci√≥n l√≥gica']
  restoredAt timestamp [null, note: 'Fecha de restauraci√≥n']
  createdAt timestamp [not null, default: `now()`, note: 'Fecha de creaci√≥n']
  updatedAt timestamp [not null, default: `now()`, note: 'Fecha de √∫ltima actualizaci√≥n']
  
  Note: 'G√©neros literarios con soft delete y auditor√≠a completa'
  indexes {
    nombre [unique]
    estadoId
  }
}

Table libros {
  id integer [primary key, increment, note: 'ID √∫nico del libro']
  titulo varchar [not null, unique, note: 'T√≠tulo √∫nico del libro']
  autor varchar [not null, note: 'Autor del libro']
  editorial varchar [not null, note: 'Casa editorial']
  precio integer [not null, note: 'Precio en pesos chilenos (sin decimales)']
  disponibilidad integer [not null, default: 0, note: 'Cantidad de ejemplares disponibles']
  imagenUrl varchar(500) [null, note: 'URL de la imagen de portada del libro']
  generoId integer [not null, ref: > generos.id, note: 'Referencia al g√©nero']
  estadoId integer [not null, ref: > estados.id, note: 'Referencia al estado']
  restoredAt timestamp [null, note: 'Fecha de restauraci√≥n']
  deletedAt timestamp [null, note: 'Fecha de eliminaci√≥n l√≥gica']
  createdAt timestamp [not null, default: `now()`, note: 'Fecha de creaci√≥n']
  updatedAt timestamp [not null, default: `now()`, note: 'Fecha de √∫ltima actualizaci√≥n']
  
  Note: 'Libros con gesti√≥n de inventario, im√°genes y soft delete'
  indexes {
    titulo [unique]
    generoId
    estadoId
    autor
    editorial
  }
}

// Definici√≥n de enums
Enum user_role {
  user
  admin
  librarian
}

// Definici√≥n de relaciones
Ref: users.estadoId > estados.id [note: 'Usuario pertenece a un estado']
Ref: generos.estadoId > estados.id [note: 'G√©nero pertenece a un estado'] 
Ref: libros.generoId > generos.id [note: 'Libro pertenece a un g√©nero']
Ref: libros.estadoId > estados.id [note: 'Libro pertenece a un estado']

// Relaciones One-to-Many expl√≠citas
Ref: generos.id < libros.generoId [note: 'Un g√©nero puede tener muchos libros']
Ref: estados.id < users.estadoId [note: 'Un estado puede tener muchos usuarios']
Ref: estados.id < generos.estadoId [note: 'Un estado puede tener muchos g√©neros'] 
Ref: estados.id < libros.estadoId [note: 'Un estado puede tener muchos libros']

// Notas del sistema
Note sistema {
'''
üèóÔ∏è ARQUITECTURA DEL SISTEMA - CMPC LIBROS

üìã CARACTER√çSTICAS PRINCIPALES:
‚Ä¢ Soft Delete: Eliminaci√≥n l√≥gica preservando datos hist√≥ricos
‚Ä¢ Auditor√≠a Completa: Timestamps autom√°ticos (createdAt, updatedAt)
‚Ä¢ Gesti√≥n de Estados: Control centralizado del ciclo de vida
‚Ä¢ Roles de Usuario: Administrador, Bibliotecario, Usuario
‚Ä¢ Gesti√≥n de Inventario: Control de disponibilidad de ejemplares
‚Ä¢ Subida de Im√°genes: Portadas de libros con validaci√≥n

üîÑ ESTADOS DISPONIBLES:
‚Ä¢ activo: Entidad disponible para operaciones normales
‚Ä¢ eliminado: Entidad eliminada l√≥gicamente (soft delete)

üë• ROLES DE USUARIO:
‚Ä¢ admin: Acceso completo al sistema
‚Ä¢ librarian: Gesti√≥n de libros y usuarios
‚Ä¢ user: Consulta y operaciones b√°sicas

üöÄ CARACTER√çSTICAS T√âCNICAS:
‚Ä¢ Base de Datos: PostgreSQL 15
‚Ä¢ ORM: Sequelize con TypeScript
‚Ä¢ API: NestJS con Swagger Documentation
‚Ä¢ Frontend: React con TypeScript
‚Ä¢ Autenticaci√≥n: JWT con bcrypt
‚Ä¢ Logging: Winston con auditor√≠a completa
‚Ä¢ Testing: Jest con 131+ tests (41% coverage)

üìä ESTAD√çSTICAS ACTUALES:
‚Ä¢ 35 g√©neros literarios precargados
‚Ä¢ 100+ libros de ejemplo
‚Ä¢ 6 usuarios con diferentes roles
‚Ä¢ Sistema de auditor√≠a y logs integrado
‚Ä¢ Subida y servicio de im√°genes funcional

üîê SEGURIDAD:
‚Ä¢ Contrase√±as hasheadas con bcrypt (salt rounds: 10)
‚Ä¢ Validaci√≥n de entrada con class-validator
‚Ä¢ CORS configurado para frontend
‚Ä¢ Headers de seguridad en responses
‚Ä¢ Rate limiting y middleware de logging

üìÅ ESTRUCTURA DE ARCHIVOS:
‚Ä¢ /uploads/libros/: Im√°genes de portadas
‚Ä¢ /logs/: Archivos de auditor√≠a y errores
‚Ä¢ Servicio de archivos est√°ticos configurado

üéØ FUNCIONALIDADES IMPLEMENTADAS:
‚Ä¢ CRUD completo para todas las entidades
‚Ä¢ Soft delete con posibilidad de restauraci√≥n
‚Ä¢ Paginaci√≥n autom√°tica en listados
‚Ä¢ B√∫squeda y filtrado avanzado
‚Ä¢ Sistema de roles y permisos
‚Ä¢ Subida y gesti√≥n de im√°genes
‚Ä¢ Logging y auditor√≠a de acciones
‚Ä¢ API RESTful documentada con Swagger
'''
}